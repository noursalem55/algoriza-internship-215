// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vezeeta.Repo.Data;

#nullable disable

namespace Vezeeta.Repo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231210192033_update_DoctorAppointment")]
    partial class update_DoctorAppointment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Vezeeta.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecializeID")
                        .HasColumnType("int");

                    b.Property<string>("speciality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SpecializeID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AccountType = "Admin",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            Gender = false,
                            Image = "1.png",
                            IsAdmin = true,
                            LastName = "User",
                            Password = "admin",
                            Phone = "011225445"
                        });
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.Booking", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<bool>("ConfirmCheckUp")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountCodeID")
                        .HasColumnType("int");

                    b.Property<int>("DoctorAppointmentTimesID")
                        .HasColumnType("int");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("DoctorAppointmentTimesID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.DiscountCode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("RequestCompleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("AdminId");

                    b.ToTable("DiscountCodes");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.DoctorAppointment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.ToTable("DoctorAppointments");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.DoctorAppointmentTimes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DoctorAppointmentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeTo")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DoctorAppointmentID");

                    b.ToTable("DoctorAppointmentTimes");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.Specialize", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Specializes");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Vezeeta.Core.Entities.Specialize", "Specialize")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Specialize");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.Booking", b =>
                {
                    b.HasOne("Vezeeta.Core.Entities.DoctorAppointmentTimes", "DoctorAppointmentTimes")
                        .WithMany("Bookings")
                        .HasForeignKey("DoctorAppointmentTimesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vezeeta.Core.Entities.ApplicationUser", "Doctor")
                        .WithMany("DoctorBookings")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Vezeeta.Core.Entities.DiscountCode", "DiscountCode")
                        .WithMany("Bookings")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Vezeeta.Core.Entities.ApplicationUser", "Patient")
                        .WithMany("PatientBookings")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiscountCode");

                    b.Navigation("Doctor");

                    b.Navigation("DoctorAppointmentTimes");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.DiscountCode", b =>
                {
                    b.HasOne("Vezeeta.Core.Entities.ApplicationUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.DoctorAppointment", b =>
                {
                    b.HasOne("Vezeeta.Core.Entities.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.DoctorAppointmentTimes", b =>
                {
                    b.HasOne("Vezeeta.Core.Entities.DoctorAppointment", "DoctorAppointment")
                        .WithMany("DoctorAppointmentTimes")
                        .HasForeignKey("DoctorAppointmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorAppointment");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("DoctorBookings");

                    b.Navigation("PatientBookings");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.DiscountCode", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.DoctorAppointment", b =>
                {
                    b.Navigation("DoctorAppointmentTimes");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.DoctorAppointmentTimes", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Vezeeta.Core.Entities.Specialize", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
